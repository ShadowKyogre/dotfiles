#!/bin/zsh

# sk prompt theme

prompt_sk_help () {
  cat <<'EOF'
This prompt is color-scheme-able.  You can invoke it thus:

  prompt sk [ 8bit ] [<color1> [<color2> [<color3>] [<color4>]]

where the colors are for the hyphens, current directory, user@host,
and user input bits respectively.  The default colors are cyan, green,
cyan, and white.  This theme works best with a dark background.

If you have either UTF-8 or the `nexus' or `vga' console fonts or similar,
you can specify the `8bit' option to use 8-bit replacements for the
7-bit characters.

And you probably thought adam1 was overkill ...
EOF
}

prompt_sk_setup () {
  # Some can't be local
  setopt localoptions nowarncreateglobal
  local prompt_gfx_tlc prompt_gfx_mlc prompt_gfx_blc
  autoload -Uz truncated_dir
  autoload -Uz vcs_info

  zstyle ':vcs_info:*' check-for-changes true
  zstyle ':vcs_info:*' nvcsformats ''
  zstyle ':vcs_info:*' formats '%c%u%B%F{yellow}%b%f%m'
  zstyle ':vcs_info:*' stagedstr '%B%F{green}!%f%b'
  zstyle ':vcs_info:*' unstagedstr '%B%F{yellow}!%f%b'
  zstyle ':vcs_info:*' actionformats '%c%u%b%m %B%s-%a%%b'
  zstyle ':vcs_info:git*+set-message:*' hooks git-untracked git-aheadbehind git-remotebranch

  prompt_gfx_tlc='/'
  prompt_gfx_mlc='|'
  prompt_gfx_blc='\\'
  prompt_gfx_brc='/'
  prompt_gfx_trc='\\'
  prompt_gfx_hyphen='-'

  if [[ $1 == '8bit' ]]; then
    #shift
    if [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *UTF-8* ]]; then
      prompt_gfx_tlc=$'\u256d'
      prompt_gfx_trc=$'\u256e'
      prompt_gfx_mlc=$'\u251c'
      prompt_gfx_blc=$'\u2570'
      prompt_gfx_brc=$'\u256f'
      prompt_gfx_hyphen=$'\u2500'
    fi
  fi

  # Colour scheme
  prompt_sk_color1=${2:-'cyan'}    # hyphens
  prompt_sk_color2=${3:-'green'}   # current directory
  prompt_sk_color3=${4:-'cyan'}    # user@host
  prompt_sk_color4=${5:-'white'}   # user input
  prompt_sk_color5=${6:-'yellow'}  # pupil, misc. decos

  local prompt_gfx_bbox 
  prompt_gfx_tbox="%{%b%F{$prompt_sk_color1}%}${prompt_gfx_tlc}%{%F{$prompt_sk_color1}%}${prompt_gfx_hyphen}"
  prompt_gfx_bbox="%{%b%F{$prompt_sk_color1}%}${prompt_gfx_blc}${prompt_gfx_hyphen}%{%F{$prompt_sk_color1}%}"
  prompt_gfx_mbox="%{%b%F{$prompt_sk_color1}%}${prompt_gfx_mlc}%{%F{$prompt_sk_color1}%}${prompt_gfx_hyphen}"

  # This is a cute hack.  Well I like it, anyway.
  prompt_gfx_bbox_to_mbox=$'%{\e[A\r'"%}${prompt_gfx_mbox}%{"$'\e[B%}'

  prompt_l_paren="%{%B%F{$prompt_sk_color1}%}["
  prompt_r_paren="%{%B%F{$prompt_sk_color1}%}]"

  prompt_user_host="%{%b%F{$prompt_sk_color3}%}%n%{%B%F{$prompt_sk_color3}%}@%{%b%F{$prompt_sk_color3}%}%m"
  prompt_dt="%{%b%F{$prompt_sk_color3}%}%D{%Y-%m-%d (%a) %H:%M:%S}%{%b%f%}"
  prompt_vcs=""

  prompt_line_0a="%{%b%F{$prompt_sk_color1}%}${prompt_gfx_blc}%f$prompt_l_paren$prompt_user_host$prompt_r_paren%{%b%F{$prompt_sk_color1}%}"

  prompt_line_0b="$prompt_l_paren$prompt_dt$prompt_r_paren%{%b%F{$prompt_sk_color1}%}${prompt_gfx_trc}"

  prompt_line_1a="$prompt_gfx_tbox$prompt_l_paren%{%B%F{$prompt_sk_color2}%}"'$(truncated_dir 1)'"$prompt_r_paren%{%b%F{$prompt_sk_color1}%}"
  prompt_line_1b="${prompt_gfx_brc}"

  prompt_line_2="$prompt_gfx_bbox"

  prompt_vcs_indicator="%K{$prompt_sk_color3}%B%F{$prompt_sk_color5}|%k%b%f "

  prompt_char="%{%b%F{$prompt_sk_color1}%}{%{%B%F{$prompt_sk_color3}%}(%{%F{$prompt_sk_color5}%}$%{%B%F{$prompt_sk_color3}%})%{%b%F{$prompt_sk_color1}%})>%{%B%F{$prompt_sk_color3}%}-<"

  prompt_opts=(cr subst percent)

  add-zsh-hook precmd prompt_sk_precmd
}

prompt_sk_precmd() {
  setopt localoptions extendedglob noxtrace nowarncreateglobal
  local prompt_line_1

  vcs_info
  prompt_sk_choose_prompt
  if [[ -z "${vcs_info_msg_0_}" ]];then
    prompt_vcs=""
  else
    prompt_vcs="$prompt_vcs_indicator"'${vcs_info_msg_0_}'
  fi

  # main prompt
  print -rP "$prompt_line_0"
  print -rP "$prompt_line_1"
  if [[ -n "${prompt_vcs}" ]];then
    print -rP "${prompt_vcs}"
  fi
  PS1="$prompt_line_2$prompt_char %{%b%f%k%}"

  #timestamp as rprompt
  #RPROMPT="$prompt_dt"

  # line continuation prompt
  PS2="%{%B%F{$prompt_sk_color5}%}%_>  %{%b%f%k%}"

  # select in script prompt
  PS3="%{%B%F{white}%}?# %{%b%f%k%}"
  zle_highlight[(r)default:*]="default:fg=$prompt_sk_color4,bold"
}

prompt_sk_choose_prompt () {
  local prompt_line_0a_width=${#${(S%%)prompt_line_0a//(\%([KF1]|)\{*\}|\%[Bbkf])}}
  local prompt_line_0b_width=${#${(S%%)prompt_line_0b//(\%([KF1]|)\{*\}|\%[Bbkf])}}
  local prompt_line_1a_width=${#${(S%%)prompt_line_1a//(\%([KF1]|)\{*\}|\%[Bbkf])}}
  local prompt_line_1b_width=${#${(S%%)prompt_line_1b//(\%([KF1]|)\{*\}|\%[Bbkf])}}

  local prompt_padding_size
  local prompt_padding_size0
  local prompt_padding

  prompt_padding_size=$(( COLUMNS 
                          - prompt_line_1a_width
                          - prompt_line_1b_width ))
  prompt_padding_size0=$(( COLUMNS 
                          - prompt_line_0a_width
                          - prompt_line_0b_width ))

  if (( prompt_padding_size0 > 0 ));then
    eval "prompt_padding=\${(l:${prompt_padding_size0}::${prompt_gfx_hyphen}:)_empty_zz}"
    prompt_line_0="$prompt_line_0a$prompt_padding$prompt_line_0b"
  fi

  # Try to fit in long path and user@host.
  if (( prompt_padding_size > 0 )); then
    eval "prompt_padding=\${(l:${prompt_padding_size}::${prompt_gfx_hyphen}:)_empty_zz}"
    prompt_line_1="$prompt_line_1a$prompt_padding$prompt_line_1b"
    return
  fi
}

### git: Show +N/-N when your local branch is ahead-of or behind remote HEAD.
# Make sure you have added misc to your 'formats':  %m
function +vi-git-aheadbehind() {
    local ahead behind
    local -a gitstatus

    # for git prior to 1.7
    # ahead=$(git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
    ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l | tr -d ' ')
    (( $ahead )) && gitstatus+=( "%B%F{blue}+${ahead}%f%b" )

    # for git prior to 1.7
    # behind=$(git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
    behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l | tr -d ' ')
    (( $behind )) && gitstatus+=( "%B%F{red}-${behind}%f%b" )

    hook_com[misc]+=${(j::)gitstatus}
}

function +vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | fgrep '??' &> /dev/null ; then
        # This will show the marker if there are any untracked files in repo.
        # If instead you want to show the marker only if there are untracked
        # files in $PWD, use:
        #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
        hook_com[unstaged]+='%B%F{magenta}?%f%b'
    fi
}

### git: Show remote branch name for remote-tracking branches
# Make sure you have added staged to your 'formats':  %b
function +vi-git-remotebranch() {
    local remote

    # Are we on a remote-tracking branch?
    remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
        --symbolic-full-name 2>/dev/null)/refs\/remotes\/}

    # The first test will show a tracking branch whenever there is one. The
    # second test, however, will only show the remote branch's name if it
    # differs from the local one.
    #if [[ -n ${remote} ]] ; then
    if [[ -n ${remote} && ${remote#*/} != ${hook_com[branch]} ]] ; then
        hook_com[branch]="${hook_com[branch]}(%F{cyan}${remote}%f)"
    fi
}

prompt_sk_preview() {
	if (( ! $#* ));then
		prompt_preview_theme sk
		print
		prompt_preview_theme sk 8bit
	else
		prompt_preview_theme sk "$@"
	fi
}

prompt_sk_setup "$@"
